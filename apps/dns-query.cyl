/* The maximum number of queries to send. */
max_queries = 1;

/* DNS server configuration. */
/*def dns_server_ip = vector(0xfd00, 0, 0, 0, 0x200, 0, 0, 1);*/
dns_server_ip = vector(127, 0, 1, 1);
dns_server_port = 53;

/* Constant query definitions. */
qtype = 1; /* A record. */
qclass = 1; /* IN class. */

/* Create a DNS query record for a particular domain to look up. */
function create_qr_buffer(domain)
{
  labels = string_split(domain, ".");
  buffer_index = 0;
  buffer = make_buffer(string_length(domain) + 6);

  /* First write the labels, each prepended by a length byte. */
  for_each(lambda(label) {
             buffer_index += buffer_append(buffer, buffer_index,
	                                   string_length(label));
             buffer_index += buffer_append(buffer, buffer_index, label);
	   }, labels);

  /* Terminate the domain name by writing a 0-length label, and then write
     the query type (16-bit) and the query class (16-bit). */
  for_each(lambda(byte) {
             buffer_index += buffer_append(buffer, buffer_index, byte); },
           list(0, 0, qtype, 0, qclass));

  buffer;
}

/* Send a DNS request to look up a particular domain name through
   a supplied socket identifier. */
function lookup(resolver_socket, domain)
{
  qr_buffer = create_qr_buffer(domain);

  /*
   * A vector of the field lengths in bits of a DNS header.
   *
   * ID:16, QR:1, Opcode:4, AA:1, TC:1, RD: 1, RA:1, Z:3, RCode:4,
   * QDCount:16, ANCount:16, NSCount:16, ARCount:16
   */
  dns_header_fields = vector(16, 1, 4, 1, 1, 1, 1, 3, 4, 16, 16, 16, 16);

  /* Create a zero-initialized value vector for the DNS header. */
  dns_header_values = make_vector(|dns_header_fields|, 0);

  /* Set QR to 1. */
  dns_header_values[1] = 1;

  /* Set the QDCount to 1. */
  dns_header_values[9] = 1;

  /* Set a new query ID. */
  dns_header_values[0] = random();

  /* Generate a raw DNS header based on the field lengths and
      the corresponding values initialized above. */
  header_buffer = construct_packet(dns_header_fields, dns_header_values);

  buffer = make_buffer(|header_buffer| + |qr_buffer|);

  index = buffer_append(buffer, 0, header_buffer);
  buffer_append(buffer, index, qr_buffer);

  println("DNS packet: ", buffer, ", length = ", |buffer|);

  write(buffer, resolver_socket);
  buffer = read(resolver_socket);
  println("Reply: ", buffer, ", length = ", |buffer|);
}

/* Initialize the constant values of the DNS queries that will be sent. */
sock = make_client(*UDP*, dns_server_ip, dns_server_port);

for(i = 0; i < max_queries; i++) {
  println("Look-up number ", i);
  lookup(sock, "www.sics.se");
  thread_sleep!(300);
}
